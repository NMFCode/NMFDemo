//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMFDemo.Metamodels.FSM
{
    
    
    /// <summary>
    /// The representation of the Transition class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/NMFCode/Examples/FiniteStateMachines")]
    [XmlNamespacePrefixAttribute("fsm")]
    [ModelRepresentationClassAttribute("http://github.com/NMFCode/Examples/FiniteStateMachines#//Transition/")]
    public class Transition : ModelElement, ITransition, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Input property
        /// </summary>
        private string _input;
        
        /// <summary>
        /// The backing field for the Target property
        /// </summary>
        private IState _target;
        
        /// <summary>
        /// The input property
        /// </summary>
        [XmlElementNameAttribute("input")]
        [XmlAttributeAttribute(true)]
        public virtual string Input
        {
            get
            {
                return this._input;
            }
            set
            {
                if ((value != this._input))
                {
                    this._input = value;
                    this.OnInputChanged(EventArgs.Empty);
                    this.OnPropertyChanged("Input");
                }
            }
        }
        
        /// <summary>
        /// The source property
        /// </summary>
        [XmlElementNameAttribute("source")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute(typeof(IState), "outgoing")]
        public virtual IState Source
        {
            get
            {
                return ModelHelper.CastAs<IState>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The target property
        /// </summary>
        [XmlElementNameAttribute("target")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute(typeof(IState), "incoming")]
        public virtual IState Target
        {
            get
            {
                return this._target;
            }
            set
            {
                if ((this._target != value))
                {
                    IState old = this._target;
                    this._target = value;
                    if ((old != null))
                    {
                        old.Incoming.Remove(this);
                        old.Deleted -= this.OnResetTarget;
                    }
                    if ((value != null))
                    {
                        if ((value.Incoming.Contains(this) != true))
                        {
                            value.Incoming.Add(this);
                        }
                        value.Deleted += this.OnResetTarget;
                    }
                    this.OnPropertyChanged("Target");
                    this.OnTargetChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransitionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the Input property changed its value
        /// </summary>
        public event EventHandler InputChanged;
        
        /// <summary>
        /// Gets fired when the Source property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SourceChanged;
        
        /// <summary>
        /// Gets fired when the Target property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TargetChanged;
        
        /// <summary>
        /// Raises the InputChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInputChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.InputChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IState oldSource = ModelHelper.CastAs<IState>(oldParent);
            IState newSource = ModelHelper.CastAs<IState>(newParent);
            if ((oldSource != null))
            {
                oldSource.Outgoing.Remove(this);
            }
            if ((newSource != null))
            {
                newSource.Outgoing.Add(this);
            }
            this.OnPropertyChanged("Source");
            this.OnSourceChanged(new ValueChangedEventArgs(oldSource, newSource));
        }
        
        /// <summary>
        /// Raises the TargetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TargetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Target property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTarget(object sender, EventArgs eventArgs)
        {
            this.Target = null;
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://github.com/NMFCode/Examples/FiniteStateMachines#//Transition/");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Transition class
        /// </summary>
        public class TransitionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Transition _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransitionReferencedElementsCollection(Transition parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Source != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Target != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SourceChanged += this.PropagateValueChanges;
                this._parent.TargetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SourceChanged -= this.PropagateValueChanges;
                this._parent.TargetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Source == null))
                {
                    IState sourceCasted = item.As<IState>();
                    if ((sourceCasted != null))
                    {
                        this._parent.Source = sourceCasted;
                        return;
                    }
                }
                if ((this._parent.Target == null))
                {
                    IState targetCasted = item.As<IState>();
                    if ((targetCasted != null))
                    {
                        this._parent.Target = targetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Source = null;
                this._parent.Target = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Source))
                {
                    return true;
                }
                if ((item == this._parent.Target))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Source != null))
                {
                    array[arrayIndex] = this._parent.Source;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Target != null))
                {
                    array[arrayIndex] = this._parent.Target;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Source == item))
                {
                    this._parent.Source = null;
                    return true;
                }
                if ((this._parent.Target == item))
                {
                    this._parent.Target = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Source).Concat(this._parent.Target).GetEnumerator();
            }
        }
    }
}

